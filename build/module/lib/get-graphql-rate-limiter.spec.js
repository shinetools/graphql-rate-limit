// eslint-disable-next-line import/no-extraneous-dependencies
import test from 'ava';
import { getFieldIdentity, getGraphQLRateLimiter } from './get-graphql-rate-limiter';
import { InMemoryStore } from './in-memory-store';
test('getFieldIdentity with no identity args', t => {
    t.is(getFieldIdentity('myField', [], {}), 'myField');
    t.is(getFieldIdentity('random', [], {}), 'random');
});
test('getFieldIdentity with identity args', t => {
    t.is(getFieldIdentity('myField', ['id'], { id: 2, name: 'Foo' }), 'myField:2');
    t.is(getFieldIdentity('myField', ['name', 'id'], { id: 2, name: 'Foo' }), 'myField:Foo:2');
    t.is(getFieldIdentity('myField', ['name', 'bool'], { bool: true, name: 'Foo' }), 'myField:Foo:true');
    t.is(getFieldIdentity('myField', ['name', 'bool'], {}), 'myField::');
    t.is(getFieldIdentity('myField', ['name', 'bool'], { name: null }), 'myField::');
});
test('getFieldIdentity with nested identity args', t => {
    t.is(getFieldIdentity('myField', ['item.id'], { item: { id: 2 }, name: 'Foo' }), 'myField:2');
    t.is(getFieldIdentity('myField', ['item.foo'], { item: { id: 2 }, name: 'Foo' }), 'myField:');
    const obj = { item: { subItem: { id: 9 } }, name: 'Foo' };
    t.is(getFieldIdentity('myField', ['item.subItem.id'], obj), 'myField:9');
    const objTwo = { item: { subItem: { id: 1 } }, name: 'Foo' };
    t.is(getFieldIdentity('myField', ['name', 'item.subItem.id'], objTwo), 'myField:Foo:1');
});
test('getGraphQLRateLimiter with an empty store passes, but second time fails', async (t) => {
    const rateLimit = getGraphQLRateLimiter({
        store: new InMemoryStore(),
        identifyContext: context => context.id
    });
    const config = { max: 1, window: '1s' };
    const field = {
        parent: {},
        args: {},
        context: { id: '1' },
        info: { fieldName: 'myField' }
    };
    t.falsy((await rateLimit(field, config)).errorMessage);
    t.is((await rateLimit(field, config)).errorMessage, `You are trying to access 'myField' too often`);
});
test('getGraphQLRateLimiter timestamps should expire', async (t) => {
    const rateLimit = getGraphQLRateLimiter({
        store: new InMemoryStore(),
        identifyContext: context => context.id
    });
    const config = { max: 1, window: '0.5s' };
    const field = {
        parent: {},
        args: {},
        context: { id: '1' },
        info: { fieldName: 'myField' }
    };
    t.falsy((await rateLimit(field, config)).errorMessage);
    t.is((await rateLimit(field, config)).errorMessage, `You are trying to access 'myField' too often`);
    setTimeout(async () => {
        t.falsy((await rateLimit(field, config)).errorMessage);
    }, 500);
});
test('getGraphQLRateLimiter should limit by callCount if arrayLengthField is passed', async (t) => {
    const rateLimit = getGraphQLRateLimiter({
        store: new InMemoryStore(),
        identifyContext: context => context.id
    });
    const config = {
        max: 4,
        window: '1s',
        arrayLengthField: 'items'
    };
    const field = {
        parent: {},
        args: {
            items: [1, 2, 3, 4, 5]
        },
        context: { id: '1' },
        info: { fieldName: 'listOfItems' }
    };
    t.is((await rateLimit(field, config)).errorMessage, `You are trying to access 'listOfItems' too often`);
});
test('getGraphQLRateLimiter should allow multiple calls to a field if the identityArgs change', async (t) => {
    const rateLimit = getGraphQLRateLimiter({
        store: new InMemoryStore(),
        identifyContext: context => context.id
    });
    const config = {
        max: 1,
        window: '1s',
        identityArgs: ['id']
    };
    const field = {
        parent: {},
        args: {
            id: '1'
        },
        context: { id: '1' },
        info: { fieldName: 'listOfItems' }
    };
    t.falsy((await rateLimit(field, config)).errorMessage);
    t.is((await rateLimit(field, config)).errorMessage, `You are trying to access 'listOfItems' too often`);
    t.falsy((await rateLimit({ ...field, args: { id: '2' } }, config)).errorMessage);
    t.is((await rateLimit(field, config)).errorMessage, `You are trying to access 'listOfItems' too often`);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWdyYXBocWwtcmF0ZS1saW1pdGVyLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2dldC1ncmFwaHFsLXJhdGUtbGltaXRlci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCxPQUFPLElBQUksTUFBTSxLQUFLLENBQUM7QUFFdkIsT0FBTyxFQUNMLGdCQUFnQixFQUNoQixxQkFBcUIsRUFDdEIsTUFBTSw0QkFBNEIsQ0FBQztBQUNwQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHbEQsSUFBSSxDQUFDLHdDQUF3QyxFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQ2pELENBQUMsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDckQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMscUNBQXFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7SUFDOUMsQ0FBQyxDQUFDLEVBQUUsQ0FDRixnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQzNELFdBQVcsQ0FDWixDQUFDO0lBQ0YsQ0FBQyxDQUFDLEVBQUUsQ0FDRixnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUNuRSxlQUFlLENBQ2hCLENBQUM7SUFDRixDQUFDLENBQUMsRUFBRSxDQUNGLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQzFFLGtCQUFrQixDQUNuQixDQUFDO0lBQ0YsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDckUsQ0FBQyxDQUFDLEVBQUUsQ0FDRixnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFDN0QsV0FBVyxDQUNaLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyw0Q0FBNEMsRUFBRSxDQUFDLENBQUMsRUFBRTtJQUNyRCxDQUFDLENBQUMsRUFBRSxDQUNGLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUMxRSxXQUFXLENBQ1osQ0FBQztJQUNGLENBQUMsQ0FBQyxFQUFFLENBQ0YsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQzNFLFVBQVUsQ0FDWCxDQUFDO0lBRUYsTUFBTSxHQUFHLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDMUQsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRXpFLE1BQU0sTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQzdELENBQUMsQ0FBQyxFQUFFLENBQ0YsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxFQUFFLGlCQUFpQixDQUFDLEVBQUUsTUFBTSxDQUFDLEVBQ2hFLGVBQWUsQ0FDaEIsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHlFQUF5RSxFQUFFLEtBQUssRUFBQyxDQUFDLEVBQUMsRUFBRTtJQUN4RixNQUFNLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQztRQUN0QyxLQUFLLEVBQUUsSUFBSSxhQUFhLEVBQUU7UUFDMUIsZUFBZSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUU7S0FDdkMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxNQUFNLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUN4QyxNQUFNLEtBQUssR0FBRztRQUNaLE1BQU0sRUFBRSxFQUFFO1FBQ1YsSUFBSSxFQUFFLEVBQUU7UUFDUixPQUFPLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFO1FBQ3BCLElBQUksRUFBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQWdDO0tBQzlELENBQUM7SUFDRixDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxTQUFTLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdkQsQ0FBQyxDQUFDLEVBQUUsQ0FDRixDQUFDLE1BQU0sU0FBUyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFDN0MsOENBQThDLENBQy9DLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxnREFBZ0QsRUFBRSxLQUFLLEVBQUMsQ0FBQyxFQUFDLEVBQUU7SUFDL0QsTUFBTSxTQUFTLEdBQUcscUJBQXFCLENBQUM7UUFDdEMsS0FBSyxFQUFFLElBQUksYUFBYSxFQUFFO1FBQzFCLGVBQWUsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0tBQ3ZDLENBQUMsQ0FBQztJQUNILE1BQU0sTUFBTSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFDMUMsTUFBTSxLQUFLLEdBQUc7UUFDWixNQUFNLEVBQUUsRUFBRTtRQUNWLElBQUksRUFBRSxFQUFFO1FBQ1IsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRTtRQUNwQixJQUFJLEVBQUcsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFnQztLQUM5RCxDQUFDO0lBQ0YsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sU0FBUyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxFQUFFLENBQ0YsQ0FBQyxNQUFNLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQzdDLDhDQUE4QyxDQUMvQyxDQUFDO0lBQ0YsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN6RCxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDVixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQywrRUFBK0UsRUFBRSxLQUFLLEVBQUMsQ0FBQyxFQUFDLEVBQUU7SUFDOUYsTUFBTSxTQUFTLEdBQUcscUJBQXFCLENBQUM7UUFDdEMsS0FBSyxFQUFFLElBQUksYUFBYSxFQUFFO1FBQzFCLGVBQWUsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0tBQ3ZDLENBQUMsQ0FBQztJQUNILE1BQU0sTUFBTSxHQUFrQztRQUM1QyxHQUFHLEVBQUUsQ0FBQztRQUNOLE1BQU0sRUFBRSxJQUFJO1FBQ1osZ0JBQWdCLEVBQUUsT0FBTztLQUMxQixDQUFDO0lBQ0YsTUFBTSxLQUFLLEdBQUc7UUFDWixNQUFNLEVBQUUsRUFBRTtRQUNWLElBQUksRUFBRTtZQUNKLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDdkI7UUFDRCxPQUFPLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFO1FBQ3BCLElBQUksRUFBRyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQWdDO0tBQ2xFLENBQUM7SUFDRixDQUFDLENBQUMsRUFBRSxDQUNGLENBQUMsTUFBTSxTQUFTLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUM3QyxrREFBa0QsQ0FDbkQsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHlGQUF5RixFQUFFLEtBQUssRUFBQyxDQUFDLEVBQUMsRUFBRTtJQUN4RyxNQUFNLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQztRQUN0QyxLQUFLLEVBQUUsSUFBSSxhQUFhLEVBQUU7UUFDMUIsZUFBZSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUU7S0FDdkMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxNQUFNLEdBQWtDO1FBQzVDLEdBQUcsRUFBRSxDQUFDO1FBQ04sTUFBTSxFQUFFLElBQUk7UUFDWixZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUM7S0FDckIsQ0FBQztJQUNGLE1BQU0sS0FBSyxHQUFHO1FBQ1osTUFBTSxFQUFFLEVBQUU7UUFDVixJQUFJLEVBQUU7WUFDSixFQUFFLEVBQUUsR0FBRztTQUNSO1FBQ0QsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRTtRQUNwQixJQUFJLEVBQUcsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFnQztLQUNsRSxDQUFDO0lBQ0YsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sU0FBUyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxFQUFFLENBQ0YsQ0FBQyxNQUFNLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQzdDLGtEQUFrRCxDQUNuRCxDQUFDO0lBQ0YsQ0FBQyxDQUFDLEtBQUssQ0FDTCxDQUFDLE1BQU0sU0FBUyxDQUFDLEVBQUUsR0FBRyxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQ3hFLENBQUM7SUFDRixDQUFDLENBQUMsRUFBRSxDQUNGLENBQUMsTUFBTSxTQUFTLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUM3QyxrREFBa0QsQ0FDbkQsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDIn0=